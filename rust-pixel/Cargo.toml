[package]
name = "rust_pixel"
authors = ["<zhouxin@tuyoogame.com>"]
version = "0.2.0"
edition = "2021"
repository = "https://github.com/zipxing/rust_pixel"
readme = "https://github.com/zipxing/rust_pixel/blob/main/README.md"
license = "Apache-2.0"
description = "2d pixel art game engine & rapid prototype tools support terminal,sdl2 and web..."

categories = ["game-engines", "game", "gui", "graphics"] # https://crates.io/category_slugs

[dependencies]
bincode = "1.3.1"
bitflags = { version = "2.3", features = ["serde"] }
crossterm = { version = "0.22", optional = true }
flate2 = "1.0.25"
itertools = "0.13.0"
lazy_static = "1.4.0"
log = "0.4.6"
log4rs = { version = "1.2.0", optional = true }
regex = "1.5.6"
rand = "0.8.5"
rand_xoshiro = "0.6.0"
serde = { version = "1.0.114", features = ["derive"] }
sdl2 = {version = "0.36.0", optional = true, features = ["image", "gfx"]}
unicode-segmentation = { version = "1.2" }
unicode-width = { version = "0.1" }

[target.'cfg(not(any(target_os = "android",target_os = "ios",target_arch = "wasm32")))'.dependencies]
rodio = {version = "0.18.1", optional = true}
# [target.'cfg(any(target_os = "macos",target_os = "ios"))'.dependencies]
# coreaudio-sys = "0.2.15"

[target.'cfg(target_arch = "wasm32")'.dependencies]
# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.1", optional = true }
getrandom = { version = "0.2", features = ["js"] }
js-sys = "0.3.69"
# mat4 = "0.2"
# web-sys = "0.3.4"
wasm-bindgen = "0.2.92"
wasm-logger = "0.2.0"
# wasm-bindgen-futures = "0.4.42"

[dependencies.web-sys]
version = "0.3.4"
features = [
  'CanvasRenderingContext2d',
  'CssStyleDeclaration',
  'Document',
  'Element',
  'EventTarget',
  'HtmlCanvasElement',
  'HtmlElement',
  'KeyboardEvent',
  'MouseEvent',
  'Node',
  'Window',
  'WebGlBuffer',
  'WebGl2RenderingContext',
  'WebGlProgram',
  'WebGlShader',
  'WebGlUniformLocation',
  'console',
  'Event',
  'MouseEventInit'
]

[features]
default = ["log4rs", "crossterm", "rodio"]
sdl = ["log4rs", "rodio", "sdl2"]
web = []
# default = ["log4rs", "unicode-segmentation", "unicode-width", "crossterm", "rodio"]
# sdl = ["log4rs", "unicode-segmentation", "unicode-width", "crossterm", "rodio", "sdl2"]
base = ["log4rs"]

